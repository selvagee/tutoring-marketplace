generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  password          String
  email             String    @unique
  full_name         String
  role              String
  status            String?   @default("active")
  ban_reason        String?
  bio               String?
  location          String?
  hourly_rate       Int?
  profile_image_url String?
  is_online         Boolean?  @default(false)
  created_at        DateTime? @default(now()) @db.Timestamp(6)

  @@map("users")
}

model TutorProfile {
  id                Int     @id @default(autoincrement())
  user_id           Int
  education         String?
  experience        String?
  languages         String?
  hourly_rate       Int?
  subjects          String
  bio               String?
  profile_image_url String?
  location          String?
  average_rating    Float?  @default(0)
  total_reviews     Int?    @default(0)
  approval_status   String? @default("pending")
  rejection_reason  String?

  @@map("tutor_profiles")
}

model Job {
  id             Int       @id @default(autoincrement())
  student_id     Int
  title          String
  description    String
  subjects       String
  location       String
  hours_per_week Int?
  budget         String
  status         String?   @default("open")
  created_at     DateTime? @default(now()) @db.Timestamp(6)

  @@map("jobs")
}

model JobBid {
  id         Int       @id @default(autoincrement())
  job_id     Int
  tutor_id   Int
  message    String
  rate       Int
  status     String?   @default("pending")
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("job_bids")
}

model Message {
  id          Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  is_read     Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)

  @@map("messages")
}

model Review {
  id         Int       @id @default(autoincrement())
  student_id Int
  tutor_id   Int
  job_id     Int?
  rating     Int
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("reviews")
}

model session {
  sid    String   @id
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)
}
